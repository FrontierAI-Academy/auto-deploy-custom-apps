version: '3.8'

services:
  rabbit_mq:
    image: rabbitmq:3.13.7-management
    command: rabbitmq-server
    hostname: rabbit_mq
    networks: [traefik_public]
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: ${PASSWORD_32}
      RABBITMQ_DEFAULT_VHOST: default
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: ${PASSWORD_32}
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      labels:
        - traefik.enable=true
        - traefik.http.routers.rabbit_mq.rule=Host(`rabbitmqapp.${DOMAIN}`)
        - traefik.http.routers.rabbit_mq.entrypoints=websecure
        - traefik.http.routers.rabbit_mq.tls.certresolver=le
        - traefik.http.services.rabbit_mq.loadbalancer.server.port=15672

  minio:
    image: quay.io/minio/minio:RELEASE.2025-04-08T15-41-24Z
    command: server /data --console-address ':9001'
    networks: [traefik_public]
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: ${PASSWORD_32}
      MINIO_BROWSER_REDIRECT_URL: https://miniofrontapp.${DOMAIN}
      MINIO_SERVER_URL: https://miniobackapp.${DOMAIN}
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.minio_console.rule=Host(`miniofrontapp.${DOMAIN}`)
        - traefik.http.routers.minio_console.entrypoints=websecure
        - traefik.http.routers.minio_console.tls.certresolver=le
        - traefik.http.routers.minio_console.service=minio_console_svc
        - traefik.http.services.minio_console_svc.loadbalancer.server.port=9001
        - traefik.http.routers.minio_s3.rule=Host(`miniobackapp.${DOMAIN}`)
        - traefik.http.routers.minio_s3.entrypoints=websecure
        - traefik.http.routers.minio_s3.tls.certresolver=le
        - traefik.http.routers.minio_s3.service=minio_s3_svc
        - traefik.http.services.minio_s3_svc.loadbalancer.server.port=9000

  minio-init:
    image: minio/mc
    depends_on: [minio]
    networks: [traefik_public]
    entrypoint: >
      /bin/sh -c "
      echo '‚è≥ Waiting for MinIO behind Traefik...' && sleep 45 &&
      mc alias set --insecure myminio https://miniobackapp.${DOMAIN} root ${PASSWORD_32} &&
      mc admin config reset myminio identity_openid || true &&
      mc admin service restart myminio || true
      "
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: none
      placement:
        constraints: [ node.role == manager ]

  chatwoot_app:
    image: chatwoot/chatwoot:v4.0.2
    command: bundle exec rails s -p 3000 -b 0.0.0.0
    entrypoint: docker/entrypoints/rails.sh
    volumes:
      - chatwoot_data:/app/storage
    networks: [traefik_public, general_network]
    environment:
      INSTALLATION_NAME: root
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker
      SECRET_KEY_BASE: ${PASSWORD_32}
      FRONTEND_URL: https://chatwootapp.${DOMAIN}
      DEFAULT_LOCALE: es
      FORCE_SSL: 'true'
      ENABLE_ACCOUNT_SIGNUP: 'false'
      REDIS_URL: redis://redis:6379
      MAILER_SENDER_EMAIL: no-reply-unconfigured@system.local
      POSTGRES_HOST: postgres
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: ${PASSWORD_32}
      POSTGRES_DATABASE: chatwoot
      ACTIVE_STORAGE_SERVICE: local
      RAILS_LOG_TO_STDOUT: 'true'
      USE_INBOX_AVATAR_FOR_BOT: 'true'
      WEB_CONCURRENCY: "0"
      RAILS_MAX_THREADS: "6"
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      resources:
        limits:
          cpus: '1.0'
          memory: 2048M
      labels:
        - traefik.enable=true
        - traefik.http.routers.chatwoot_app.rule=Host(`chatwootapp.${DOMAIN}`)
        - traefik.http.routers.chatwoot_app.entrypoints=websecure
        - traefik.http.routers.chatwoot_app.tls.certresolver=le
        - traefik.http.services.chatwoot_app.loadbalancer.server.port=3000
        - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https
        - traefik.http.routers.chatwoot_app.middlewares=sslheader

  chatwoot_worker:
    image: chatwoot/chatwoot:v4.0.2
    command: bundle exec sidekiq -C config/sidekiq.yml
    volumes:
      - chatwoot_data:/app/storage
    networks: [general_network]
    environment:
      INSTALLATION_NAME: root
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker
      SECRET_KEY_BASE: ${PASSWORD_32}
      FRONTEND_URL: https://chatwootapp.${DOMAIN}
      DEFAULT_LOCALE: es
      FORCE_SSL: 'true'
      ENABLE_ACCOUNT_SIGNUP: 'false'
      REDIS_URL: redis://redis:6379
      MAILER_SENDER_EMAIL: no-reply-unconfigured@system.local
      POSTGRES_HOST: postgres
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: ${PASSWORD_32}
      POSTGRES_DATABASE: chatwoot
      ACTIVE_STORAGE_SERVICE: local
      RAILS_LOG_TO_STDOUT: 'true'
      USE_INBOX_AVATAR_FOR_BOT: 'true'
      SIDEKIQ_CONCURRENCY: "12"
      SIDEKIQ_QUEUES: "critical,high,default,mailers"
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      resources:
        limits:
          cpus: '1.0'
          memory: 3072M

  n8n_editor:
    image: n8nio/n8n:1.108.2
    environment:
      NODE_OPTIONS: --max-old-space-size=2048
      N8N_RUNNERS_ENABLED: 'true'
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: 'true'
      OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: 'true'
      DB_TYPE: postgresdb
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_DATABASE: n8n_fila
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: ${PASSWORD_32}
      N8N_ENCRYPTION_KEY: ${PASSWORD_32}
      N8N_HOST: n8napp.${DOMAIN}
      N8N_EDITOR_BASE_URL: https://n8napp.${DOMAIN}/
      N8N_PROTOCOL: https
      NODE_ENV: production
      WEBHOOK_URL: https://n8nwebhookapp.${DOMAIN}/
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: 2
      NODE_FUNCTION_ALLOW_EXTERNAL: moment,lodash
      EXECUTIONS_DATA_PRUNE: 'true'
      EXECUTIONS_DATA_MAX_AGE: 336
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.n8n_editor.rule=Host(`n8napp.${DOMAIN}`)
        - traefik.http.routers.n8n_editor.entrypoints=websecure
        - traefik.http.routers.n8n_editor.tls.certresolver=le
        - traefik.http.services.n8n_editor.loadbalancer.server.port=5678
    networks: [traefik_public, general_network]

  n8n_webhook:
    image: n8nio/n8n:1.108.2
    command: webhook
    environment:
      NODE_OPTIONS: --max-old-space-size=2048
      N8N_RUNNERS_ENABLED: 'true'
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: 'true'
      OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: 'true'
      DB_TYPE: postgresdb
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_DATABASE: n8n_fila
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: ${PASSWORD_32}
      N8N_ENCRYPTION_KEY: ${PASSWORD_32}
      N8N_HOST: n8napp.${DOMAIN}
      N8N_EDITOR_BASE_URL: https://n8napp.${DOMAIN}/
      N8N_PROTOCOL: https
      NODE_ENV: production
      WEBHOOK_URL: https://n8nwebhookapp.${DOMAIN}/
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: 2
      NODE_FUNCTION_ALLOW_EXTERNAL: moment,lodash
      EXECUTIONS_DATA_PRUNE: 'true'
      EXECUTIONS_DATA_MAX_AGE: 336
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.n8n_webhook.rule=Host(`n8nwebhookapp.${DOMAIN}`)
        - traefik.http.routers.n8n_webhook.entrypoints=websecure
        - traefik.http.routers.n8n_webhook.tls.certresolver=le
        - traefik.http.services.n8n_webhook.loadbalancer.server.port=5678
    networks: [traefik_public, general_network]

  n8n_worker:
    image: n8nio/n8n:1.108.2
    command: worker --concurrency=5
    environment:
      NODE_OPTIONS: --max-old-space-size=2048
      N8N_RUNNERS_ENABLED: 'true'
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: 'true'
      OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: 'true'
      DB_TYPE: postgresdb
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_DATABASE: n8n_fila
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: ${PASSWORD_32}
      N8N_ENCRYPTION_KEY: ${PASSWORD_32}
      N8N_HOST: n8napp.${DOMAIN}
      N8N_EDITOR_BASE_URL: https://n8napp.${DOMAIN}/
      N8N_PROTOCOL: https
      NODE_ENV: production
      WEBHOOK_URL: https://n8nwebhookapp.${DOMAIN}/
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: 2
      NODE_FUNCTION_ALLOW_EXTERNAL: moment,lodash
      EXECUTIONS_DATA_PRUNE: 'true'
      EXECUTIONS_DATA_MAX_AGE: 336
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      resources:
        limits:
          cpus: '1.0'
          memory: 2048M
    networks: [traefik_public, general_network]

volumes:
  rabbitmq_data: { external: true }
  minio_data:    { external: true }
  chatwoot_data: { external: true }

networks:
  traefik_public: { external: true }
  general_network: { external: true }
